name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23.2'

      - name: Install Dependencies
        run: go mod tidy

      - name: Comment go-winio for Linux Build
        run: |
          echo 'function toggle_winio_import() {
              local action="$1"
              local file="internal/player.go"
              
              if [ "$action" == "comment" ]; then
                  sed -i "s|^\\(\\s*\\\"github.com/Microsoft/go-winio\\\"\\)|// \\1|" "$file"
                  sed -i "s|^\\(.*conn, err = winio.DialPipe.*\\)|// \\1|" "$file"
              elif [ "$action" == "uncomment" ]; then
                  sed -i "s|// \\(\\s*\\\"github.com/Microsoft/go-winio\\\"\\)|\\1|" "$file"
                  sed -i "s|^// \\(.*conn, err = winio.DialPipe.*\\)|\\1|" "$file"
              fi
          }
          toggle_winio_import comment' > toggle_winio_import.sh

      - name: Execute Commenting Function for Linux Build # Comment out lines before Linux build
        run: |
          bash toggle_winio_import.sh

      - name: Build Linux binary
        run: |
          pwd
          tree ./
          outputDir="Build"
          mkdir -p "$outputDir"
          go build -o "$outputDir/curd" ./cmd/curd/main.go
          pwd
          tree ./

      - name: Revert Changes in player.go
        run: |
          git checkout -- internal/player.go

      - name: Build Windows binary (cross-compile)
        run: |
          pwd
          tree ./
          outputDir="Build"
          mkdir -p "$outputDir"
          GOOS=windows GOARCH=amd64 go build -o "$outputDir/curd.exe" ./cmd/curd/main.go
          pwd
          tree ./

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4  # Updated to version 4
        with:
          name: curd-binaries
          path: |
            Build/curd
            Build/curd.exe

  release:
    runs-on: windows-latest  # Use Windows runner for creating the installer
    needs: build  # Ensure the build job is complete before running this job
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only run on pushes to main

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v4  # Updated to version 4
        with:
          name: curd-binaries
          path: Build  # Specify where to download the artifacts
        
      - name: Bump Version
        id: bump_version
        run: |
          $current_version = Get-Content VERSION.txt
          $version_parts = $current_version -split '\.'
          $major = $version_parts[0]
          $minor = $version_parts[1]
          $patch = [int]$version_parts[2] + 1
          $new_version = "$major.$minor.$patch"
          $new_version | Set-Content VERSION.txt
          Write-Host "New version: $new_version"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION.txt
          git commit -m "Bump version to $new_version"
          git tag "v$new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Update Inno Setup Script with New Version
        run: |
          $new_version = Get-Content VERSION.txt
          $iss_path = "Build/curd-windows-build.iss"
          (Get-Content $iss_path) -replace "AppVersion=.*", "AppVersion=$new_version" | Set-Content $iss_path
  
      - name: Create Windows Installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "Build\curd-windows-build.iss"  
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.bump_version.outputs.new_version }}"  # Use the bumped version as tag
          name: "Curd v${{ steps.bump_version.outputs.new_version }}"  # Use new version in release name
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided token
